<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bingoal.study.mybatis.entity.UserMapper">
    <select id="selectUserEntity" resultType="User" parameterType="java.lang.Integer">
      select * from User where id = #{id}
    </select>


    <!-- resultMap在mybatis中是一个强大的对象, mybatis在查出结果集后, 会自动将结果组装到一个resultMap中,
    如果select中定义了resultType, 则基于属性名将resultMap转换为resultType -->
    <resultMap id="userMap" type="User">
        <!-- id 和 result都可以将一个列的值映射到一个简单数据类型 -->
        <!-- http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html -->
        <!-- TODO 文档上说 id 可以在比较对象时提高性能, 但并未理解 -->
        <id property="id" column="id" javaType="int" jdbcType="INTEGER"></id>
        <result property="name" column="alias_name"/>
    </resultMap>

    <insert id="insertUsers" useGeneratedKeys="true" parameterType="java.util.List">
        insert into user(company_id, name) values
        <foreach collection="list" item="element" index="index" separator=",">
             (#{element.companyId}, #{element.name})
        </foreach>
    </insert>

    <!-- 使用${}字符串替换，易造成sql注入 -->
    <select id="getUsersByName1" resultMap="userMap" parameterType="java.lang.String">
      select id, name as alias_name from User where name = '${name}'
    </select>

    <select id="getUsersByName" resultMap="userMap" parameterType="java.lang.String">
        select id, name as alias_name from User where name = #{name}
    </select>

    <!-- resultMap可以是很复杂的, 属性中包含对象, 集合等元素 -->
    <!-- TODO 添加一个复杂的resultMap -->

    <insert id="insertUserEntity" useGeneratedKeys="true" parameterType="recaton.study.mybatis.entity.User">
        insert into User (id, name) values (#{id}, #{name})
    </insert>

    <insert id="insertUserMap" useGeneratedKeys="true" parameterType="map">
        insert into User (id, name) values (#{id}, #{name})
    </insert>

    <delete id="deleteUsers">
        delete from user
    </delete>
</mapper>